local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- === Rayfield UI ===
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
	Name = "Real Recorder",
	LoadingTitle = "Init",
	LoadingSubtitle = "Record & Replay Real",
	KeySystem = false,
})
local Tab = Window:CreateTab("Path Tool", 4483362458)

-- === State ===
local hrp, hum
local recording = false
local playing = false
local pathData = {}
local recordConn, jumpConn
local playConn
local startTime
local playSpeed = 1 -- default 1x
local BV -- BodyVelocity instance

-- === Helper ===
local function bindChar()
	local char = player.Character or player.CharacterAdded:Wait()
	hum = char:WaitForChild("Humanoid")
	hrp = char:WaitForChild("HumanoidRootPart")
end
bindChar()
player.CharacterAdded:Connect(bindChar)

-- === Record Path ===
local function startRecord()
	if recording then return end
	recording = true
	pathData = {}
	startTime = tick()
	print("[RealRecord] Start recording...")

	recordConn = RunService.Heartbeat:Connect(function()
		if recording and hrp and hum then
			table.insert(pathData, {
				t = tick() - startTime,
				pos = {hrp.Position.X, hrp.Position.Y, hrp.Position.Z},
				vel = hum.MoveDirection.Magnitude, -- 0 or 1 (direction magnitude)
				type = "move"
			})
		end
	end)

	jumpConn = hum.StateChanged:Connect(function(_, new)
		if recording and new == Enum.HumanoidStateType.Jumping then
			table.insert(pathData, {
				t = tick() - startTime,
				pos = {hrp.Position.X, hrp.Position.Y, hrp.Position.Z},
				vel = 0,
				type = "jump"
			})
		end
	end)
end

local function stopRecord()
	if not recording then return end
	recording = false
	if recordConn then recordConn:Disconnect() recordConn = nil end
	if jumpConn then jumpConn:Disconnect() jumpConn = nil end
	print("[RealRecord] Stop. Frames:", #pathData)
end

-- === Play Path (BodyVelocity) ===
local function playPath()
	if #pathData == 0 then
		warn("[RealRecord] Tidak ada data record!")
		return
	end
	if playing then return end
	if not hrp or not hum then
		warn("[RealRecord] Character belum siap.")
		return
	end

	if recording then stopRecord() end
	playing = true
	print("[RealRecord] Playing... steps:", #pathData, " speed:", playSpeed.."x")

	-- siapkan BodyVelocity
	if BV then BV:Destroy() end
	BV = Instance.new("BodyVelocity")
	BV.MaxForce = Vector3.new(1e5, 0, 1e5)
	BV.P = 1e4
	BV.Velocity = Vector3.zero
	BV.Parent = hrp

	local playStart = tick()
	local i = 1

	-- pastikan orientasi normal di awal
	hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + hrp.CFrame.LookVector)

	if playConn then playConn:Disconnect() end

	playConn = RunService.Heartbeat:Connect(function(delta)
		if not playing then return end
		local elapsed = (tick() - playStart) * playSpeed

		while i <= #pathData and elapsed >= pathData[i].t do
			local step = pathData[i]

			-- Loncat manual
			if step.type == "jump" then
				hum.Jump = true
			end
			i += 1
		end

		if i > #pathData then
			BV.Velocity = Vector3.zero
			BV:Destroy()
			BV = nil
			playing = false
			if playConn then playConn:Disconnect() end
			print("[RealRecord] Done.")
			return
		end

		-- Gerak ke target berikutnya
		local stepNow = pathData[i]
		if stepNow and stepNow.type == "move" then
			local target = Vector3.new(stepNow.pos[1], stepNow.pos[2], stepNow.pos[3])
			local dir = (target - hrp.Position)
			local horizontal = Vector3.new(dir.X, 0, dir.Z)
			local dist = horizontal.Magnitude
			local baseSpeed = hum.WalkSpeed * playSpeed

			if dist > 0.5 then
				local moveDir = horizontal.Unit * baseSpeed
				BV.Velocity = Vector3.new(moveDir.X, 0, moveDir.Z)

				-- rotasi avatar menghadap arah gerak
				local lookAtPos = hrp.Position + horizontal
				hrp.CFrame = CFrame.lookAt(hrp.Position, lookAtPos)
			else
				BV.Velocity = Vector3.zero
			end
		end
	end)
endlocal function ensureBV()
	-- create BodyVelocity if not exists
	if not BV or not BV.Parent then
		BV = Instance.new("BodyVelocity")
		-- cukup besar agar bisa mengatasi gesekan dan slope; tapi jangan pengaruh vertical
		BV.MaxForce = Vector3.new(1e5, 0, 1e5)
		BV.P = 1e4
		BV.Velocity = Vector3.new(0, 0, 0)
		BV.Parent = hrp
	end
end

local function cleanupBV()
	if BV then
		-- reset velocity dulu
		pcall(function()
			BV.Velocity = Vector3.zero
		end)
		pcall(function() BV:Destroy() end)
		BV = nil
	end
	-- juga reset assembly velocity supaya tidak ngesot setelah berhenti
	pcall(function() hrp.AssemblyLinearVelocity = Vector3.zero end)
end



local function stopPlay()
	if not playing then
		print("[RealRecord] Play already stopped.")
		return
	end
	playing = false
	if playConn then
		playConn:Disconnect()
		playConn = nil
	end
	cleanupBV()
	-- pastikan humanoid berhenti bergerak
	if hum then
		pcall(function() hum:Move(Vector3.zero) end)
	end
	print("[RealRecord] Play stopped.")
end

-- === UI ===
Tab:CreateButton({
	Name = "Start Record",
	Callback = startRecord
})

Tab:CreateButton({
	Name = "Stop Record",
	Callback = stopRecord
})

Tab:CreateButton({
	Name = "Play Last Record",
	Callback = playPath
})

Tab:CreateButton({
	Name = "Stop Play",
	Callback = stopPlay
})

Tab:CreateSlider({
	Name = "Replay Speed",
	Range = {0.5, 3}, -- 0.5x sampai 3x
	Increment = 0.1,
	Suffix = "x",
	CurrentValue = 1,
	Callback = function(v)
		playSpeed = v
		print("[RealRecord] Replay speed diatur:", v.."x")
	end
})

Tab:CreateSlider({
	Name = "WalkSpeed",
	Range = {10, 200}, -- normal 16
	Increment = 1,
	Suffix = " ws",
	CurrentValue = 16,
	Callback = function(v)
		if hum then hum.WalkSpeed = v end
		print("[RealRecord] WalkSpeed =", v)
	end
})

Tab:CreateSlider({
	Name = "JumpPower",
	Range = {10, 300}, -- normal 50
	Increment = 1,
	Suffix = " jp",
	CurrentValue = 50,
	Callback = function(v)
		if hum then hum.JumpPower = v end
		print("[RealRecord] JumpPower =", v)
	end
})
