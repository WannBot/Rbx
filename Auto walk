local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- === Rayfield ===
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
	Name = "Real Recorder",
	LoadingTitle = "Init",
	LoadingSubtitle = "Record & Replay Smooth",
	KeySystem = false,
})
local Tab = Window:CreateTab("Path Tool", 4483362458)

-- === State ===
local hrp, hum
local recording = false
local playing = false
local pathData = {}
local playSpeed = 1
local recordConn
local startTime = 0
local currentIndex = 1

-- === Character Bind ===
local function bindChar()
	local char = player.Character or player.CharacterAdded:Wait()
	hum = char:WaitForChild("Humanoid")
	hrp = char:WaitForChild("HumanoidRootPart")
end
bindChar()
player.CharacterAdded:Connect(bindChar)

------------------------------------------------------
-- RECORD
------------------------------------------------------
local function startRecord()
	if recording then return end
	if playing then return end

	recording = true
	pathData = {}
	startTime = tick()

	print("[Recorder] Start recording...")

	recordConn = RunService.Heartbeat:Connect(function()
		if hrp and hum and recording then
			table.insert(pathData, {
				t = tick() - startTime,
				pos = {hrp.Position.X, hrp.Position.Y, hrp.Position.Z},
				state = hum:GetState().Name
			})
		end
	end)
end

local function stopRecord()
	if not recording then return end
	recording = false
	if recordConn then recordConn:Disconnect() recordConn = nil end
	print("[Recorder] Stop. Frames:", #pathData)
end

------------------------------------------------------
-- PLAYBACK (natural movement)
------------------------------------------------------
local function playPath()
	if #pathData == 0 then
		warn("[Recorder] Tidak ada data record!")
		return
	end
	if playing then return end

	playing = true
	currentIndex = 1
	local playStart = tick()
	print(string.format("[Recorder] Play %d frames @ %.1fx", #pathData, playSpeed))

	task.spawn(function()
		while playing and currentIndex < #pathData do
			local step = pathData[currentIndex]
			local nextStep = pathData[currentIndex + 1]
			if not (step and nextStep) then break end

			local duration = (nextStep.t - step.t) / playSpeed
			local startPos = Vector3.new(step.pos[1], step.pos[2], step.pos[3])
			local targetPos = Vector3.new(nextStep.pos[1], nextStep.pos[2], nextStep.pos[3])

			-- Gerakkan humanoid ke target posisi berikutnya
			hum:MoveTo(targetPos)

			-- Jika titik berikutnya adalah jump
			if step.state == "Jumping" then
				hum.Jump = true
			end

			-- Tunggu hingga waktu frame berikutnya
			local elapsed = 0
			while elapsed < duration and playing do
				RunService.Heartbeat:Wait()
				elapsed += RunService.Heartbeat:Wait()
			end

			currentIndex += 1
		end

		playing = false
		print("[Recorder] Done.")
	end)
end

local function stopPlay()
	playing = false
	hum:Move(Vector3.zero)
	print("[Recorder] Playback stopped.")
end

------------------------------------------------------
-- UI
------------------------------------------------------
Tab:CreateButton({ Name = "Start Record", Callback = startRecord })
Tab:CreateButton({ Name = "Stop Record", Callback = stopRecord })
Tab:CreateButton({ Name = "Play Last Record", Callback = playPath })
Tab:CreateButton({ Name = "Stop Play", Callback = stopPlay })

Tab:CreateSlider({
	Name = "Replay Speed",
	Range = {0.5, 3},
	Increment = 0.1,
	Suffix = "x",
	CurrentValue = 1,
	Callback = function(v)
		playSpeed = v
		print("[Recorder] Replay speed:", v.."x")
	end
})

Tab:CreateSlider({
	Name = "WalkSpeed",
	Range = {10, 200},
	Increment = 1,
	Suffix = " ws",
	CurrentValue = 16,
	Callback = function(v)
		if hum then hum.WalkSpeed = v end
	end
})

Tab:CreateSlider({
	Name = "JumpPower",
	Range = {10, 300},
	Increment = 1,
	Suffix = " jp",
	CurrentValue = 50,
	Callback = function(v)
		if hum then hum.JumpPower = v end
	end
})
