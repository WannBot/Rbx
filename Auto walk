local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- === Rayfield UI ===
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
	Name = "Real Recorder",
	LoadingTitle = "Init",
	LoadingSubtitle = "Record & Replay Real",
	KeySystem = false,
})
local Tab = Window:CreateTab("Path Tool", 4483362458)

-- === State ===
local hrp, hum
local recording = false
local playing = false
local pathData = {}
local playSpeed = 1
local recordConn
local startTime = 0
local currentFrame = 1

-- === Bind Character ===
local function bindChar()
	local char = player.Character or player.CharacterAdded:Wait()
	hum = char:WaitForChild("Humanoid")
	hrp = char:WaitForChild("HumanoidRootPart")
end
bindChar()
player.CharacterAdded:Connect(bindChar)

------------------------------------------------------
-- RECORD
------------------------------------------------------
local function startRecord()
	if recording then return end
	if playing then
		warn("[RealRecord] Tidak bisa record saat playback berjalan.")
		return
	end

	recording = true
	pathData = {}
	startTime = tick()

	print("[RealRecord] Start recording...")

	recordConn = RunService.Heartbeat:Connect(function()
		if hrp and hum and recording then
			table.insert(pathData, {
				t = tick() - startTime,
				pos = {hrp.Position.X, hrp.Position.Y, hrp.Position.Z},
				dir = {hum.MoveDirection.X, hum.MoveDirection.Y, hum.MoveDirection.Z},
				state = hum:GetState().Name
			})
		end
	end)
end

local function stopRecord()
	if not recording then return end
	recording = false
	if recordConn then
		recordConn:Disconnect()
		recordConn = nil
	end
	print("[RealRecord] Stop. Frames:", #pathData)
end

------------------------------------------------------
-- PLAYBACK
------------------------------------------------------
local function playPath()
	if #pathData == 0 then
		warn("[RealRecord] Tidak ada data record!")
		return
	end
	if playing then return end

	playing = true
	currentFrame = 1
	local playStart = tick()

	print(string.format("[RealRecord] Play %d frames @ %.1fx", #pathData, playSpeed))

	RunService.Heartbeat:Connect(function(dt)
		if not playing or currentFrame >= #pathData then return end

		local elapsed = (tick() - playStart) * playSpeed
		local nextFrame = pathData[currentFrame + 1]
		local thisFrame = pathData[currentFrame]

		if elapsed >= nextFrame.t then
			currentFrame += 1
		end

		if hrp and hum and thisFrame and nextFrame then
			-- Lerp posisi agar halus
			local posA = Vector3.new(thisFrame.pos[1], thisFrame.pos[2], thisFrame.pos[3])
			local posB = Vector3.new(nextFrame.pos[1], nextFrame.pos[2], nextFrame.pos[3])
			local interp = math.clamp((elapsed - thisFrame.t) / (nextFrame.t - thisFrame.t), 0, 1)
			local newPos = posA:Lerp(posB, interp)
			hrp.CFrame = CFrame.new(newPos, newPos + hrp.CFrame.LookVector)

			-- Gerakan arah
			local dir = Vector3.new(thisFrame.dir[1], thisFrame.dir[2], thisFrame.dir[3])
			hum:Move(dir, false)

			-- Loncat jika terekam
			if thisFrame.state == "Jumping" then
				hum.Jump = true
			end
		end

		-- Berhenti kalau selesai
		if currentFrame >= #pathData then
			playing = false
			print("[RealRecord] Done.")
		end
	end)
end

local function stopPlay()
	playing = false
	print("[RealRecord] Playback dihentikan.")
end

------------------------------------------------------
-- === UI ===
------------------------------------------------------
Tab:CreateButton({ Name = "Start Record", Callback = startRecord })
Tab:CreateButton({ Name = "Stop Record", Callback = stopRecord })
Tab:CreateButton({ Name = "Play Last Record", Callback = playPath })
Tab:CreateButton({ Name = "Stop Play", Callback = stopPlay })

Tab:CreateSlider({
	Name = "Replay Speed",
	Range = {0.5, 3},
	Increment = 0.1,
	Suffix = "x",
	CurrentValue = 1,
	Callback = function(v)
		playSpeed = v
		print("[RealRecord] Replay speed:", v.."x")
	end
})

Tab:CreateSlider({
	Name = "WalkSpeed",
	Range = {10, 200},
	Increment = 1,
	Suffix = " ws",
	CurrentValue = 16,
	Callback = function(v)
		if hum then hum.WalkSpeed = v end
		print("[RealRecord] WalkSpeed =", v)
	end
})

Tab:CreateSlider({
	Name = "JumpPower",
	Range = {10, 300},
	Increment = 1,
	Suffix = " jp",
	CurrentValue = 50,
	Callback = function(v)
		if hum then hum.JumpPower = v end
		print("[RealRecord] JumpPower =", v)
	end
})
